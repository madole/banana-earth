{"version":3,"sources":["../external \"Cesium\"","App.js","useInterval.js","reportWebVitals.js","index.js"],"names":["module","exports","Cesium","Ion","defaultAccessToken","GLOW_MATERIAL","Material","fromType","PolylineGlowType","glowPower","color","Color","App","ref","useRef","React","Cartesian3","fromDegrees","position","setPosition","snailTrail","setSnailTrail","console","log","current","cesiumElement","animation","container","style","visibility","timeline","forceResize","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","a","fetch","response","json","altitude","latitude","longitude","nextPosition","getISSPosition","top","left","right","bottom","baseLayerPicker","uri","minimumPixelSize","maximumPixelSize","positions","width","show","material","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qGAAAA,EAAOC,QAAUC,Q,iMCOjBC,MAAIC,mBAAqB,oNAEzB,IAAMC,EAAgBC,WAASC,SAASD,WAASE,iBAAkB,CAC/DC,UAAW,GACXC,MAAO,IAAIC,QAAM,EAAK,GAAK,EAAK,KAqCrBC,MAlCf,WACI,IAAMC,EAAMC,iBAAO,MADR,EAEqBC,WAAeC,aAAWC,YAAY,UAAW,QAAS,MAF/E,mBAEJC,EAFI,KAEMC,EAFN,OAGyBJ,WAAe,IAHxC,mBAGJK,EAHI,KAGQC,EAHR,KAsBX,OAlBAN,aAAgB,WACZO,QAAQC,IAAIV,EAAIW,SAChBX,EAAIW,QAAQC,cAAcC,UAAUC,UAAUC,MAAMC,WAAa,SACjEhB,EAAIW,QAAQC,cAAcK,SAASH,UAAUC,MAAMC,WAAa,SAChEhB,EAAIW,QAAQC,cAAcM,gBAC3B,ICrBoB,SAACC,EAAUC,GAClC,IAAMC,EAAgBnB,WAEtBA,aAAgB,WACZmB,EAAcV,QAAUQ,IACzB,CAACA,IAEJjB,aAAgB,WAKZ,GAAc,OAAVkB,EAAgB,CAChB,IAAIE,EAAKC,aALb,WACIF,EAAcV,YAIaS,GAC3B,OAAO,kBAAMI,cAAcF,OAEhC,CAACF,IDMJK,EAAY,YACY,uCAAG,sCAAAC,EAAA,sEACIC,MAAM,kDADV,cACbC,EADa,gBAEAA,EAASC,OAFT,OAEbA,EAFa,OAGZC,EAAiCD,EAAjCC,SAAUC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,UACrBC,EAAe9B,aAAWC,YAAY4B,EAAWD,EAAqB,IAAXD,GACjExB,EAAYH,aAAWC,YAAY4B,EAAWD,EAAqB,IAAXD,IACxDtB,EAAc,GAAD,mBAAKD,GAAL,CAAiB0B,KANX,4CAAH,qDAQpBC,KACD,KAGC,eAAC,IAAD,CAAQlC,IAAKA,EAAKe,MAAO,CAACV,SAAU,WAAY8B,IAAK,EAAGC,KAAM,EAAGC,MAAO,EAAGC,OAAQ,GAAIC,iBAAiB,EAAxG,UACI,cAAC,IAAD,CAAQlC,SAAUA,EAAlB,SACI,cAAC,IAAD,CAAemC,IAAK,eAAgBC,iBAAkB,IAAKC,iBAAkB,QAEjF,cAAC,IAAD,UACI,cAAC,IAAD,CAAUC,UAAWpC,EAAYqC,MAAO,GAAIC,MAAM,EAAMC,SAAUtD,UE9BnEuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.02b1de67.chunk.js","sourcesContent":["module.exports = Cesium;","import * as React from 'react';\nimport {useRef} from 'react';\nimport {Entity, ModelGraphics, Polyline, PolylineCollection, Viewer} from 'resium'\nimport './App.css';\nimport {Cartesian3, Color, Ion, Material} from 'cesium'\nimport {useInterval} from \"./useInterval\";\n\nIon.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJjMjk3OGRkNS0zZTZjLTQyZGYtYjAzNy1lYTk5NmY3NDkyZTMiLCJpZCI6MzMxMzksInNjb3BlcyI6WyJhc3IiLCJnYyJdLCJpYXQiOjE1OTgwNjc1ODh9.KjJzjblyvrJlF0WkZZznyR6FXfNZY432yc19DtT1Ozc'\n\nconst GLOW_MATERIAL = Material.fromType(Material.PolylineGlowType, {\n    glowPower: 0.1,\n    color: new Color(1.0, 0.5, 0.0, 1.0)\n});\n\nfunction App() {\n    const ref = useRef(null);\n    const [position, setPosition] = React.useState(Cartesian3.fromDegrees(151.2093, -33.8688, 2000.0))\n    const [snailTrail, setSnailTrail] = React.useState([])\n    React.useEffect(() => {\n        console.log(ref.current)\n        ref.current.cesiumElement.animation.container.style.visibility = 'hidden';\n        ref.current.cesiumElement.timeline.container.style.visibility = 'hidden';\n        ref.current.cesiumElement.forceResize();\n    }, [])\n    useInterval(() => {\n        const getISSPosition = async () => {\n            const response = await fetch('https://api.wheretheiss.at/v1/satellites/25544')\n            const json = await response.json()\n            const {altitude, latitude, longitude} = json\n            const nextPosition = Cartesian3.fromDegrees(longitude, latitude, altitude * 1000)\n            setPosition(Cartesian3.fromDegrees(longitude, latitude, altitude * 1000))\n            setSnailTrail([...snailTrail, nextPosition])\n        }\n        getISSPosition()\n    }, 5000)\n\n    return (\n        <Viewer ref={ref} style={{position: 'absolute', top: 0, left: 0, right: 0, bottom: 0}} baseLayerPicker={false}>\n            <Entity position={position}>\n                <ModelGraphics uri={\"/banana.gltf\"} minimumPixelSize={200} maximumPixelSize={500}/>\n            </Entity>\n            <PolylineCollection>\n                <Polyline positions={snailTrail} width={20} show={true} material={GLOW_MATERIAL}/>\n            </PolylineCollection>\n        </Viewer>\n    );\n}\n\nexport default App;\n","import * as React from \"react\";\n\nexport const useInterval = (callback, delay) => {\n    const savedCallback = React.useRef();\n\n    React.useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    React.useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}